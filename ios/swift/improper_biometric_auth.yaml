rules:
  - id: improper_biometric_auth
    severity: WARNING
    metadata:
      author: Maurizio Siddu
      references:
        - https://github.com/OWASP/owasp-mastg/blob/master/Document/0x06f-Testing-Local-Authentication.md
        - https://developer.apple.com/documentation/localauthentication/logging_a_user_into_your_app_with_face_id_or_touch_id
        - https://developer.apple.com/documentation/security/keychain_services/keychain_items/restricting_keychain_item_accessibility
        - https://developer.apple.com/documentation/security/secaccesscontrolcreateflags
      category: security
    message: >-
      This iOS mobile application does not implement properly the Biometric Authentication mechanism, because
      is using the Local Authentication framework or the Security framework configured with a weak Keychain
      flag (such as: kSecAccessControlBiometryAny, kSecAccessControlTouchIDAny, kSecAccessControlTouchIDCurrentSet, 
      kSecAccessControlUserPresence, kSecAttrAccessibleAlways, kSecAccessControlWatch, kSecAttrAccessibleAlwaysThisDeviceOnly, 
      SecAccessControlCreateFlags.biometryAny, SecAccessControlCreateFlags.userPresence or SecAccessControlCreateFlags.watch). 
      The biometric authentication checks implemented using Local Authentication framework could be bypassed 
      by an attacker. Instead when the Security framework is configured with a weak (or legacy) Keychain flag 
      an attacker could be able to: 
      - add/enroll his biometric data to unlock the Keychain item without invalidate it, 
      - always access the data in the Keychain item regardless of whether the device is locked,
      - authenticate using a paired Apple Watch device instead of biometric data.
      In sensitive contexts, it is recommended to implement Biometric Authentication controls using the Security
      framework properly configured as stated in the official security guidelines for iOS. 
      Specifically, the Security framework should be configured with the method "SecAccessControlCreateWithFlags"
      having the "protection" argument set to "kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly" or
      "kSecAttrAccessibleWhenPasscodeSet" values. 
      In addition, if possible the method "SecAccessControlCreateWithFlags" should be set with any of the secure flags 
      "kSecAccessControlBiometryCurrentSet" or "kSecAccessControlDevicePasscode". 
    languages: [swift]
    patterns:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern: let $CONTEXT = LAContext()
              - pattern-inside: |
                  func $FUNC() {
                    ...
                    $CONTEXT.evaluatePolicy(...)
                    ...
                  }
          - patterns:
              - pattern-inside: |
                  func $FUNC() {
                    ...
                    let $AUTHCONTROL = SecAccessControlCreateWithFlags(..., $VALUE, ...)
                    ...
                  }
              - metavariable-regex:
                  metavariable: $VALUE
                  regex: (kSecAccessControlUserPresence|kSecAccessControlBiometryAny|SecAccessControlCreateFlags\.biometryAny|\.biometryAny|kSecAccessControlWatch|SecAccessControlCreateFlags\.watch|\.watch|kSecAccessControlTouchIDAny|SecAccessControlCreateFlags\.userPresence|\.userPresence|kSecAccessControlTouchIDCurrentSet|\.touchIDCurrentSet|kSecAttrAccessibleAlways|kSecAttrAccessibleAlwaysThisDeviceOnly)
              - focus-metavariable: $VALUE
          - patterns:
              - pattern-inside: |
                  func $FUNC() {
                    ...
                    let $AUTHCONTROL = SecAccessControlCreateWithFlags(..., $VALUE, ...)!
                    ...
                  }
              - metavariable-regex:
                  metavariable: $VALUE
                  regex: (kSecAccessControlUserPresence|kSecAccessControlBiometryAny|SecAccessControlCreateFlags\.biometryAny|\.biometryAny|kSecAccessControlWatch|SecAccessControlCreateFlags\.watch|\.watch|kSecAccessControlTouchIDAny|SecAccessControlCreateFlags\.userPresence|\.userPresence|kSecAccessControlTouchIDCurrentSet|\.touchIDCurrentSet|kSecAttrAccessibleAlways|kSecAttrAccessibleAlwaysThisDeviceOnly)
              - focus-metavariable: $VALUE
          - patterns:
              - pattern-inside: |
                  func $FUNC() {
                    ...
                    guard let $AUTHCONTROL = SecAccessControlCreateWithFlags(..., $VALUE, ...) else {...}
                    ...
                  }
              - metavariable-regex:
                  metavariable: $VALUE
                  regex: (kSecAccessControlUserPresence|kSecAccessControlBiometryAny|SecAccessControlCreateFlags\.biometryAny|\.biometryAny|kSecAccessControlWatch|SecAccessControlCreateFlags\.watch|\.watch|kSecAccessControlTouchIDAny|SecAccessControlCreateFlags\.userPresence|\.userPresence|kSecAccessControlTouchIDCurrentSet|\.touchIDCurrentSet|kSecAttrAccessibleAlways|kSecAttrAccessibleAlwaysThisDeviceOnly)
              - focus-metavariable: $VALUE
          - patterns:
              - pattern-inside: |
                  func $FUNC() {
                    ...
                    guard let $AUTHCONTROL = SecAccessControlCreateWithFlags(..., $VALUE, ...)! else {...}
                    ...
                  }
              - metavariable-regex:
                  metavariable: $VALUE
                  regex: (kSecAccessControlUserPresence|kSecAccessControlBiometryAny|SecAccessControlCreateFlags\.biometryAny|\.biometryAny|kSecAccessControlWatch|SecAccessControlCreateFlags\.watch|\.watch|kSecAccessControlTouchIDAny|SecAccessControlCreateFlags\.userPresence|\.userPresence|kSecAccessControlTouchIDCurrentSet|\.touchIDCurrentSet|kSecAttrAccessibleAlways|kSecAttrAccessibleAlwaysThisDeviceOnly)
              - focus-metavariable: $VALUE